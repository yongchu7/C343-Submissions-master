package hw10;

// Team partner: Ke Zhao(chenxiny)

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Vector;

public class AdjGraph implements Graph {
  private boolean digraph;
  private int totalNode;
  private Vector<String> nodeList;
  private int totalEdge;
  private Vector<LinkedList<Integer>>  adjList; //Adjacency list
  private Vector<Boolean> visited;
  private Vector<Integer> nodeEnum; // list of nodes pre visit
  private int[][] weights;
  
  public AdjGraph() {
    init();
  }
  
  public AdjGraph(boolean ifdigraph) {
    init();
    digraph =ifdigraph;
  }
  
  public void init() {
    nodeList = new Vector<String>(); 
    adjList = new Vector<LinkedList<Integer>>(); 
    visited = new Vector<Boolean>();
    nodeEnum = new Vector<Integer>();
    totalNode = totalEdge = 0;
    digraph = false;
  }
  
  //set vertices
  public void setVertex(String[] nodes) {
    for(int i = 0; i < nodes.length; i ++) {
      nodeList.add(nodes[i]);
      adjList.add(new LinkedList<Integer>());
      visited.add(false);
      totalNode ++;
    }
  }
  
  //add a vertex
  public void addVertex(String label) {
    nodeList.add(label);
    visited.add(false);
    adjList.add(new LinkedList<Integer>());
    totalNode ++;
  }
  
  public int getNode(String node) {
    for(int i = 0; i < nodeList.size(); i ++) {
      if(nodeList.elementAt(i).equals(node)) return i;
    }
    return -1;
  }
  
  //return the number of vertices
  public int length() {
    return nodeList.size();
  }
  
  //add edge from v1 to v2
  public void setEdge(int v1, int v2, int weight) {
    LinkedList<Integer> tmp = adjList.elementAt(v1);
    if(adjList.elementAt(v1).contains(v2) == false) {
      tmp.add(v2);
      adjList.set(v1,  tmp);
      totalEdge ++;
      this.weights[v1][v2] = weight;
    }
  }
  
  public void setEdge(String v1, String v2, int weight) {
    if((getNode(v1) != -1) && (getNode(v2) != -1)) {
      //add edge from v1 to v2
      setEdge(getNode(v1), getNode(v2), weight);
      //for digraph, add edge from v2 to v1 as well
      if(digraph == false) setEdge(getNode(v2), getNode(v1), weight);
    }
  }
  
  //it is important to keep track if a vertex is visited or not (for traversal)
  public void setVisited(int v) {
    visited.set(v, true);
    nodeEnum.add(v);
  }
  
  public boolean ifVisited(int v) {
    return visited.get(v);
  }
  
  public void clearWalk() {
    //clean up before traverse
    nodeEnum.clear();
    for(int i = 0; i < nodeList.size(); i ++) visited.set(i, false);
  }
  
  public void walk(String method) {
    clearWalk();
    //traverse the graph 
    for(int i = 0; i < nodeList.size(); i ++) {
      if(ifVisited(i) == false) {
        if(method.equals("BFS")) BFS(i); //i as the start node
        else if(method.equals("DFS")) DFS(i); //i as the start node
        else {
          System.out.println("unrecognized traversal order: " + method);
          System.exit(0);
        }
      }
    }
    System.out.println(method + ":");
    displayEnum();
  }
  
  public void DFS(int v) {
    setVisited(v);
    LinkedList<Integer> neighbors = adjList.elementAt(v);
    for(int i = 0; i < neighbors.size(); i ++) {
      int v1 = neighbors.get(i);
      if(ifVisited(v1) == false) DFS(v1); 
    }
  }
  
  public void BFS(int s) {
    ArrayList<Integer> toVisit = new ArrayList<Integer>();
    toVisit.add(s);
    while(toVisit.size() > 0) {
      int v = toVisit.remove(0); //first-in, first-visit
      setVisited(v);
      LinkedList<Integer> neighbors = adjList.elementAt(v);
      for(int i = 0; i < neighbors.size(); i ++) {
        int v1 = neighbors.get(i);
        if((ifVisited(v1) == false) && (toVisit.contains(v1) == false)) {
          toVisit.add(v1);
        }
      }
    }
  }
  
  public void display() {
    System.out.println("total nodes: " + totalNode);
    System.out.println("total edges: " + totalEdge);
  }
  
  public void displayEnum() {
    for(int i = 0; i < nodeEnum.size(); i ++) {
      System.out.print(nodeList.elementAt(nodeEnum.elementAt(i)) + " ");
    }
    System.out.println();
  }
  
  public void cowMarathon(){
     int dis[][] = new int [nodeList.size()][nodeList.size()];  
     for (int a=0; a<nodeList.size(); a++) {
       for (int b=0; b<nodeList.size(); b++) {
         if (adjList.get(a).contains(b)) {
           dis[a][b] = weights[a][b];
         }
         else {
           dis[a][b]=0;
         }
       }
     }
     System.out.println("The initial table looks like: ");
     for(int[] i:dis) {
       for(int j:i) {
         System.out.print(j + " ");
       }
       System.out.println();
     }
     
     for (int k=0; k<nodeList.size(); k++) {
       for (int i=0; i<nodeList.size(); i++) {
         for (int j=0; j<nodeList.size();j++) {
           if(dis[i][k] != 0 && dis[k][j] != 0) {
             if (dis[i][j] < dis[i][k] + dis[k][j]){              
               dis[i][j] = dis[i][k] + dis[k][j];
             }
           }
         }
       }
     }
     
     
     System.out.println();
     
     System.out.println("The final table looks like: ");
     for(int[] points:dis) {
       for(int point:points) {
         System.out.print(point + " ");
       }
       System.out.println();
     }
     
     System.out.println();
     int max = 0;
     for(int[] points:dis) {
       for(int point:points) {
         if (point>max)
           max=point;
       }
     }
     System.out.println("The longest path weights: " + max);
   }  
  public static void main(String[] args) {
    
    AdjGraph a = new AdjGraph(true);
    Scanner in = new Scanner(System.in);
    int farm,edges, weight,index=1;
    String farm_1,farm_2,direction;
    farm= in.nextInt();
    edges= in.nextInt();
    a.weights = new int[farm][farm];
    
    for (int i=1; i<farm+1;i++){
     a.addVertex(i+"");
    }
    while(index<= edges){
     a.setEdge(farm_1=in.nextInt()+"", farm_2=in.nextInt()+"", weight=in.nextInt());
     direction=in.nextLine();
     index++;
    }
    a.display();    
    System.out.println();
    a.cowMarathon();
  }
}