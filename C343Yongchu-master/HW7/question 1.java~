
// 7.18
//    (d) (e) are the best implemented by first sorting

//(a)  the sequential search. The worst case time complexity is 成(n) without sorting

//(b)  the sequential search. The worst case time complexity is 成(n) without sorting

//(c) add up each item in list, and then dividing by the length of the list
 //   the worst case time complexity is 成(n) without sorting

//(d) First sort numbers, the complexity of sorting is 成(nlogn)
 //   If the total number is odd, choose the middle one
 //   if it is even, find the mean of central two numbers
    
//(e) First sort, the time complexity of sorting is 成(nlogn)
 //  and then making a pass through the list keeping track of the
 //   element seen the most times.
